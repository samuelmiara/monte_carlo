import random
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad
from scipy.optimize import minimize_scalar
from matplotlib.animation import FuncAnimation


def f(x):
    """ Function whose value we approximate over the interval [0,1] """
    return x*np.log(x)


def monte_carlo_integration(num_points, f_min, f_max, previous_points, sign=0, n=0):
    """ This function implements the Monte Carlo method to approximate the integral of function f(x).
     It generates random points and checks if they lie under the function's graph.
     num_points: number of points
     f_min: minimum value of the function
     f_max: maximum value of the function
     previous_points: list of previously generated points
     return:
     integral_approximation: approximate value of the function
     points_under_curve: number of points under the curve
     """
    pos_intervals, neg_intervals = determine_intervals(f)
    count_under_curve = 0
    points_under_curve = previous_points[:]
    for _ in range(num_points - len(previous_points)):
        x = random.uniform(0, 1)
        y = random.uniform(f_min, f_max)
        if f_max > 0 and f_min == 0:
            n =n + 1
            if y <= f(x):
                count_under_curve += 1
                points_under_curve.append((x, y, True))
            else:
                points_under_curve.append((x, y, False))

        elif f_max == 0:
            n=n+1
            if y >= f(x):
                count_under_curve -= 1
                points_under_curve.append((x, y, True))
            else:
                points_under_curve.append((x, y, False))

        else:
            for xi in range(len(pos_intervals)):
                if pos_intervals[xi][0] < x < pos_intervals[xi][1] and y >= 0:
                    n=n+1
                    if y <= f(x):
                        count_under_curve += f_max * (pos_intervals[xi][1] - pos_intervals[xi][0])
                        points_under_curve.append((x, y, True))
                        sign += 1 if y < 0 else -1
                    else:
                        points_under_curve.append((x, y, False))
            for xi in range(len(neg_intervals)):
                if neg_intervals[xi][0] < x < neg_intervals[xi][1] and y <= 0:
                    n=n+1
                    if y >= f(x):
                        count_under_curve += f_min * (neg_intervals[xi][1] - neg_intervals[xi][0])
                        points_under_curve.append((x, y, True))
                        sign += 1 if y < 0 else -1
                    else:
                        points_under_curve.append((x, y, False))

    if sign==0:
        integral_approximation = (f_max-f_min)*count_under_curve/n
    else:
        integral_approximation = count_under_curve/n
    return integral_approximation, points_under_curve


def compute_min_max():
    """ Computes the minimum and maximum value over the interval [0,1]
    return:
    f_min: minimum value of the function
    f_max: maximum value of the function """
    result_max = minimize_scalar(lambda x: -f(x), bounds=(0, 1), method='bounded')
    f_max = -result_max.fun
    result_min = minimize_scalar(f, bounds=(0, 1), method='bounded')
    f_min = 0 if result_min.fun >= 0 else result_min.fun
    f_max = f_max if result_min.fun < 0 or f_max >= 0 else 0
    return f_min, f_max


def determine_intervals(f, state=-1):
    """ Helper function to check in which intervals the function is positive and negative
    return:
    pos_intervals: set of positive intervals
    neg_intervals: set of negative intervals """
    pos_intervals, neg_intervals, buffer = [], [], []
    for x in range(1000):
        prev_state = state
        state = 1 if f(x / 1000) > 0 else 0
        buffer.append(x / 1000)
        if prev_state != state:
            if prev_state == 1:
                pos_intervals.append([buffer[0], buffer[-1]])
            else:
                neg_intervals.append([buffer[0], buffer[-1]])
            buffer.clear()
    if state == 1:
        pos_intervals.append([buffer[0], buffer[-1]])
    else:
        neg_intervals.append([buffer[0], buffer[-1]])
    neg_intervals.remove([0.0, 0.0])
    return pos_intervals, neg_intervals


def update(frame):
    """ Updates the plot for animation. """
    if frame[0] == 0:
        return
    ax.set_title('Monte Carlo Integration')
    ax.set_xlabel('x')
    ax.set_ylabel('f(x)')
    x, y, under_curve = zip(*frame[1])
    scat.set_offsets(np.column_stack((x, y)))
    scat.set_color(['red' if under else 'blue' for under in under_curve])
    approx_text.set_text(f'Approximation: {frame[0]:.4f}')


num_points = 1000

f_min, f_max = compute_min_max()
true_value, _ = quad(f, 0, 1)

fig, ax = plt.subplots()
x = np.linspace(0, 1, 100)
y = f(x)
line, = ax.plot(x, y, 'b-', lw=2)
scat = ax.scatter([], [], color=[], alpha=0.5)
approx_text = ax.text(0.95, 0.05, '', transform=ax.transAxes, ha='right', fontsize=14)

ax.set_ylim(f_min - 0.1 * (f_max - f_min), f_max + 0.1 * (f_max - f_min))
plt.xlim(0, 1)

frames = []
previous_points = []
for i in range(1, 101):
    approximation, points = monte_carlo_integration(i * num_points, f_min, f_max, previous_points)
    frames.append((approximation, points[:]))
    previous_points = points[:]

ani = FuncAnimation(fig, update, frames=frames, blit=False, repeat=False)

plt.show()
print("Approximate integral value:", approximation)
print("True integral value:", true_value)
